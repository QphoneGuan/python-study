# this file records the test of fishC.com

# 1st class
\n表示换行符,等同于'''a b c'''
\表示对字符进行转义，例如'I \'love\' fishC.com' == 'I "love" fishC.com'（''和""配合使用也可以）
5+8和print(5+8),前者输出值和类型，而后者只输出值

# 2nd-3rd class
查询内置函数(BIF),在IDLE中输入dir(__builtins__)
python的使用中最重要的是缩进
python中不能以数字开头作为变量名
\\这个可以用来转义\,我们还可以使用name = r'abc\\' 等同于直接输入 'abc\\',name = r'C:\now'等同于'C:\\now'

# 4th class
使用while循环语句时，当判定条件为字符串或者数值等（非布尔运算，例如while 'C':）默认条件为真，只有当条件为False，None，0，[]，{}，()，''，""时默认为假
在python3中，一行可以书写多个语句，只需要用分号（;）隔开即可。(分行显示)
在python3中，一行语句也可以分多行书写，只需要在末尾加上\，或者整个语句用（）括起来
range反向排列用法↓：
number = int(input('请输入一个整数：'))
for i in range(number,1,-1):
    print(' '*i + '*'*i)
可以利用print()方法加个换行符，利用print('apple',end = '')不加换行符，利用print('apple',end = ' ')末尾用空格代替换行

# 5th class
布尔类型中的True和False可以用1和0来代替
int()函数在取整时是向下取整，例如int(9.99)=9，可以利用isinstance(object,type)来判定指定的对象（object）的类型和type是否一致，例如isinstance('apple',float)返回的结果就是False

python3源码文件默认使用utf-8编码（支持中文），因此可以用中文作为变量名，例如苹果 = 'i love you'
type(input('请输入数字：'))总是<class'str'>，尽管你输入的是数字。
字符串（str）类型判定方法：str.isalnum()数字字母;str.isalpha()字母;str.isdigit()数字;str.islower()全是小写;str.isupper()全是大写;
str.istitle()单词首字母大写剩下小写;object.isspace()全是空格;(注意：只能对字符串做这个操作)

# 6th class
注意：在幂运算中，幂运算操作符优先级比其左边高，比其右边低。2**2**32会使电脑崩溃，但是(2**2)**32不会
逻辑操作符中：not > and > or
not 1 or 0 and 1 or 3 and 4 or 5 and 6 or 7 and 8 and 9 == (not 1) or (0 and 1) or (3 and 4) or (5 and 6) or (7 and 8 and 9)
== 0 or 0 or 4 or 6 or 9
== 4(靠前的优先)

# 7-8th class
assert称之为断言语句，这个用法是>>>assert 条件，条件为真跳过继续，条件为假系统崩溃并出现AssertionError。assert的作用是测试程序的时候，与其让错误
条件运行到最后导致出问题，还不如加个assert判定，判定条件一定为真才让程序正常工作。
多个变量快速赋值方法(举例)：x,y,z = 1,3,5
成员资格操作符（in 和 not in）:用来判定某个元素是否在对象中，在则返回True反之返回False。举例：'a' in 'apple'返回Ture。90 in [9,90,'abc']返回True
三元操作符快速写代码：small = (x if x< y else y) if (x if x< y else y) < z else z，small = x if (x < y and x < z) else (y if y < z else z)

# 9th class
while True语句经常在游戏，操作系统，通讯服务器等使用，时刻接收客户数据，时刻保持在线
少用函数去运行可以提高运行效率，特别是循环体判定条件的时候
举个例子：用户输错密码提醒-方法1
pw = 'FishC.com'
password = str(input('请输入密码：'))
times = 3

while '*' in password:
    password = str(input('密码中不能含有“*”号！您还有3次机会！请输入密码：'))
if password != pw:
    while times > 1:

times -= 1
        password = str(input('密码输入错误！您还有' + str(times) + '次机会，请输入密码：'))
    print('您密码输入的次数太多，账户已被冻结！')
else:
    print('密码正确，进入程序……')
方法1
count = 3
password = 'FishC.com'

while count:
    passwd = input('请输入密码：')
    if passwd == password:
        print('密码正确，进入程序')
        break
    elif '*' in passwd:
        print('密码中不能含有"*"号，您还有',count,'次机会！',end = ' ')
    else:
        print('密码输入有误！您还有'，count - 1 ，'次机会！'，end = ' ')
    count -= 1
水仙花数问题：100-999中，三位数三个数位的数字分别立方再求和等于这个三位数。
for i in range(100,1000):
    sum = 0
    temp = i
    while temp:
        sum = sum + (temp % 10) **3
        temp //= 10
    if sum == i:
        print(i)
12个球（3红3黄6绿）选出8个，三种颜色球的数量匹配情况
print('red\tyellow\tgreen')
for red in range(0, 4):
    for yellow in range(0, 4):
        for green in range(2, 7):
            if red + yellow + green == 8:
                # 注意，下边不是字符串拼接，因此不用“+”哦~（\t表示插入横向制表符）
                print(red, '\t', yellow, '\t', green)

# 10-11th class
将一个列表的最后一个元素放在第一个：list1.insert(0,list1.pop())
列表切片的时候可以从末尾切，例如：list2[-3:-1]表示将倒数第三个和倒数第二个切出来
列表还可以按照布长切片，例如list2[::-3]符号表示从右向左取值，右边开始第0个元素，然后再取倒数第三个，再继续……

#12th class
列表从小到大排序（同类型）：list1.sort().从大到小排序：list1.sort(reverse = True)
列表的连续索引功能：list1[index1][index2][index3](注意前提是这个对象元素可以一直被索引)
注意赋值问题：a = [1,2] b = a a = [3] print(a)得到[3] print(b)得到[1,2](注意：非列表对象也是一样)。类似于切片[:]操作
列表推导式（列表解析）功能：>>> list1 = [(x, y) for x in range(10) for y in range(10) if x%2==0 if y%2!=0] 相当于
list1 = []
for x in range(10):
    for y in range(10):
        if x%2 == 0:
            if y%2 != 0:
                list1.append((x, y))

#13th class
列表是一个大仓库，我们可以随时往里边添加或者删除任何东西；元组是封闭的列表，一旦定义无法更改（添加，删除，修改，复制）只能count(),index(),分片[:],拼接
元组定义方式：a = 6,8,0 a = 'a','ggf','ert' a = ('a',45,'ads')

#14th class
多行字符串创建方法（非\n方法，这种创建都是不带换行符的）： 
方法1  s ='''asdf
asdfasf'''
方法2  s ='asdfasdfa\
asfasdf\
asdfasdf'
方法3  s = ('asfasdf'
'asdfasdfa'
'asdfasdf')
三层单引号方法（''''''）经常当作多行注释使用
当使用[：：]方法加入负数分片时（步长只能为正），从右边数是从1开始而非0。

#15th class
'{0}{1:.2f}.format('Pi = ',3.1415)结果是'Pi = 3.14'，1：是位置参数，因为.2f是对1这个参数保留2位小数，所以加了个：号
格式化字符串操作符：
%    %% 百分号标记 #就是输出一个%
code    %c     格式化字符及其ASCII码
string    %s     格式化字符串
decimal    %d     格式化整数
    %u     格式化无符号整型
octal    %o     格式化无符号八进制数
hexadecimal    %x     格式化无符号十六进制数
heXadecimal    %X     格式化无符号十六进制数（大写）
float    %f     格式化浮点数字，可指定小数点后的精度
    %e     用科学计数法格式化浮点数
    %E     作用同%e，用科学计数法格式化浮点数
general    %g     %f和%e的简写
General    %G     %f和%E的简写
place    %p     用十六进制数格式化变量的地址
辅助指令：
    *     定义宽度或者小数点精度
    -     用做左对齐
    +     在正数前面显示加号( + )
    <sp>  在正数前面显示空格
    \#    在八进制数前面显示零('0')，在十六进制前面显示'0x'或者'0X'(取决于用的是'x'还是'X')
    0     显示的数字前面填充`0`而不是默认的空格
    %     '%%'输出一个单一的'%'
    (var) 映射变量(字典参数)
    m.n.  m是显示的最小总宽度,n是小数点后的位数(如果可用的话)
    举例：格式化字符操作符混合使用！
    print('十进制 -> 十六进制 : %d -> 0x%x' % (num, num))
    print('十进制 -> 八进制 : %d -> 0o%o' % (num, num))
    print('十进制 -> 二进制 : %d -> ' % num, bin(num))

#16th class
列表，元组，字符串统称为“序列”！
我们可以通过函数list()和tuple()将可迭代对象转化为列表和元组（通过for...in...这类语句迭代读取⼀条数据供我们使⽤的对象称之为可迭代对象（Iterable））
,str()可以将对象转化为字符串。
list(),len(),min(),max(),sum(x[,y])(注意数字类型才可用,或者sum([1,2,3,4,5])==15),sorted()
reveresed(),enumerate(),zip(x,y)这三个需要用list等显示出结果，否则返回一个迭代器对象
举例说明：True和False赋值给对象的使用
name = input('请输入待查找的用户名：')
score = [['迷途', 85], ['黑夜', 80], ['小布丁', 65], ['福禄娃娃', 95], ['怡静', 90]]
isfind == False

for each in score:
    if name in each:
        print(name + '的得分是：', each[1])
        isfind == True
        break
if isfind == False:
    print('查找的数据不存在！')

#17th class
定义函数时，函数的参数必须是变量，不能是元组，列表等（def func((x,y),(a,b))这个就不对）
求幂代码
def power(x, y):
    result = 1
    
    for i in range(y):
        result *= x

    return result

print(power(2, 3))
求公约数代码
def gcd(x, y):
    while y:
        t = x % y
        x = y
        y = t

    return x
    
print(gcd(4, 6))
求十进制转二进制代码
def Dec2Bin(dec):
    temp = []
    result = ''
    
    while dec:
        quo = dec % 2
        dec = dec // 2
        temp.append(quo)

    while temp:
        result += str(temp.pop())
    
    return result

print(Dec2Bin(62))

#18th class
关于函数的几种参数：
1，形参和实参。例如def func(x)/func(5),这个x就是形参，可以赋值的，这个5就是实参，被函数调用的。
2，关键字参数。例如def func(name,doge)/func(doge = 5,name = 90)函数被调用时，这个doge=和name=就是关键字参数，避免因为函数参数太多高搞混乱。
3，默认参数。例如def func(name1 = 'apple',name2 = 'love')表示这个含有2个参数的函数如果调用时不填参数输出applelove,填一个参数（orage）输出orangelove
填2个参数（'orange','fuck'）输出orangefuck。也可以这样调用func(name2='fuck')输出applefuck
4，收集参数。例如def func(*params,name=5),*params是收集参数（name=5是默认参数），parames可以是随意的一组列表元素，例如func(1,2,4,3,6,name = 3)
关于函数注释（举例）
def func():
    '这个函数是用来干嘛的'
利用func.__doc__可以查看这个函数的注释字符串或者用help(func)查看函数用法

#19th class
在python中，函数是可以向前引用的。举例:
def func1():
    func2()
    
def func2():
    print('go')
func1()-----go
函数中可以使用return来返回值(后面可以接元组，列表，字符串，不接东西也可以)，当然也可以不用（可以用print），但是当print(函数)时会回复none

#20th class
关于闭包（closure）的概念：如果在一个内部函数里，对外部作用域（但不是在全局作用域）的变量进行引用，那么内部函数就会被认为是闭包
如果要想在内嵌函数里使用外部函数变量，定义函数时：nonlocal 变量。如果想在函数里调用全局变量，定义函数时：global 变量。
举例说明闭包：
def funX(x):
    def funY(y):
        return x*y
    return funY
funX(8)
此时由于return funY（返回了一个函数，也就是说funX(x) == funY）。所以funX(8)是函数，如果想要调用结果的话可以调用funX(8)(2)相当于funY(2)，或者将
a = funX(8)（给a赋值一个函数）
a(2)（调用这个函数）
没看懂代码
def funX():
    x = 5
    def funY():
        nonlocal x
        x += 1
        return x
    return funY

a = funX()
print(a()) #这个会输出6
print(a()) #这个会输出7
print(a()) #这个会输出8
*以下代码没看懂*：
str1 = '''ABSaDKSbRIHcRHGcdDIF'''

countA = 0  # 统计前边的大写字母
countB = 0  # 统计小写字母
countC = 0  # 统计后边的大写字母
length = len(str1)

for i in range(length):
    if str1[i] == '\n':
        continue

    """
    |如果str1[i]是大写字母：
    |-- 如果已经出现小写字母：
    |-- -- 统计后边的大写字母
    |-- 如果未出现小写字母：
    |-- -- 清空后边大写字母的统计
    |-- -- 统计前边的大写字母
    """
    if str1[i].isupper():
        if countB:
            countC += 1
        else:
            countC = 0
            countA += 1

    """
    |如果str1[i]是小写字母：
    |-- 如果小写字母前边不是三个大写字母（不符合条件）：
    |-- -- 清空所有记录，重新统计
    |-- 如果小写字母前边是三个大写字母（符合条件）：
    |-- -- 如果已经存在小写字母：
    |-- -- -- 清空所有记录，重新统计（出现两个小写字母）
    |-- -- 如果该小写字母是唯一的：
    |-- -- -- countB记录出现小写字母，准备开始统计countC
    """
    if str1[i].islower():
        if countA != 3:
            countA = 0
            countB = 0
            countC = 0
        else: 
            if countB:
                countA = 0
                countB = 0
                countC = 0
            else:
                countB = 1
                countC = 0
                target = i

    """
    |如果前边和后边都是三个大写字母：
    |-- 如果后边第四个字母也是大写字母（不符合条件）：
    |-- -- 清空记录B和C，重新统计
    |-- 如果后边仅有三个大写字母（符合所有条件）：
    |-- -- 打印结果，并清空所有记录，进入下一轮统计
    """
    if countA == 3 and countC == 3:
        if i+1 != length and str1[i+1].isupper():
            countB = 0
            countC = 0
        else:
            print(str1[target], end='')
            countA = 3
            countB = 0
            countC = 0

#25-26th class(runoob)
字典（dirt）
dirt = {key1:value1,key2:value2......}
1，value可以是任何对象。
2，key必须是不可变的，只能用数字，字符串和元组充当。
3，不允许同一个键出现两次。创建时如果同一个键被赋值两次，后一个值会被记住。
删除key:del dict['name']
删除dict:del dict
内置函数：len(dict),str(dict),type(dict)
dict内置方法(dict.X()方法)：
clear()清空。
copy()浅复制。
fromkeys()创建新字典，键变成seq，值不变。
get(key,default=None)返回指定键的值否则返回默认值。
key in dict返回真或假。
items()以列表方式返回键值对应的元组数组（用list()可以显示出来）。
keys()以列表的方式返回所有键（用list()可以显示出来）。
setdefault(key,default=None)和get()类似若键不在字典中会添加键并将值设为default。
update(dict2)把字典dict2的键值对更新到dict里。
values()以列表方式返回字典里面的值。
pop(key[,default])删除字典给定键和所对应的值，返回值为被删除的值。key值必须给出。否则，返回default值。
popitem()删除字典中最后一对键和值（一般为最后），返回值为被删除的键和值组成的元组。
创建字典的N个方法：
a ={'a':1,'b':2}
b = dict(a=1,b=2)
c = dict({'a':1,'b':2})
d = dict([('a',1),('b',2)])
e = dict(zip(['a','b'],[1,2]))

